// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OfficeBoy.Infrastructure.Persistance.Contexts;

#nullable disable

namespace OfficeBoy.Infrastructure.Migrations
{
    [DbContext(typeof(OfficeBoyDbContext))]
    partial class OfficeBoyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OfficeBoy.Models.DaysOfWeek", b =>
                {
                    b.Property<int>("DayId")
                        .HasColumnType("int")
                        .HasColumnName("day_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.HasKey("DayId")
                        .HasName("PK_Day_of_week");

                    b.ToTable("Days_of_weeks", (string)null);
                });

            modelBuilder.Entity("OfficeBoy.Models.Department", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Dept_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeptId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DeptId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("OfficeBoy.Models.Drink", b =>
                {
                    b.Property<int>("DrinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DrinkID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrinkId"));

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PictureUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PictureURL");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("TimeNeeded")
                        .HasColumnType("int");

                    b.HasKey("DrinkId")
                        .HasName("PK__Drinks__C094D3C82DFE6600");

                    b.ToTable("Drinks");
                });

            modelBuilder.Entity("OfficeBoy.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("OfficeLocationId")
                        .HasColumnType("int")
                        .HasColumnName("OfficeLocationID");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Employee__7AD04FF1688E7AB7");

                    b.HasIndex("OfficeLocationId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("OfficeBoy.Models.OfficeBoyShift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShiftID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftId"));

                    b.Property<int?>("DayShift")
                        .HasColumnType("int")
                        .HasColumnName("Day_Shift");

                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("emp_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_date");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ShiftId")
                        .HasName("PK__OfficeBo__C0A838E19181F165");

                    b.HasIndex("EmpId");

                    b.ToTable("OfficeBoyShifts");
                });

            modelBuilder.Entity("OfficeBoy.Models.OfficeLocation", b =>
                {
                    b.Property<int>("OfficeLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OfficeLocationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeLocationId"));

                    b.Property<int>("DeptId")
                        .HasColumnType("int")
                        .HasColumnName("dept_id");

                    b.Property<int?>("FloorNumber")
                        .HasColumnType("int")
                        .HasColumnName("Floor_number");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("OfficeLocationId")
                        .HasName("PK__OfficeLo__0B87E92C5B3A179F");

                    b.HasIndex("DeptId");

                    b.ToTable("OfficeLocations");
                });

            modelBuilder.Entity("OfficeBoy.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("DrinkId")
                        .HasColumnType("int")
                        .HasColumnName("DrinkID");

                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("emp_id");

                    b.Property<bool>("IndividualOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompany")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Company");

                    b.Property<int>("OfficeLocationId")
                        .HasColumnType("int")
                        .HasColumnName("OfficeLocationID");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Orderdate")
                        .HasColumnType("datetime")
                        .HasColumnName("orderdate");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId")
                        .HasName("PK__Orderes__C3905BAF43F7B5F3");

                    b.HasIndex("DrinkId");

                    b.HasIndex("EmpId");

                    b.HasIndex("OfficeLocationId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OfficeBoy.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("OfficeBoy.Models.Employee", b =>
                {
                    b.HasOne("OfficeBoy.Models.OfficeLocation", "OfficeLocation")
                        .WithMany("Employees")
                        .HasForeignKey("OfficeLocationId")
                        .HasConstraintName("FK__Employees__Offic__3587F3E0");

                    b.Navigation("OfficeLocation");
                });

            modelBuilder.Entity("OfficeBoy.Models.OfficeBoyShift", b =>
                {
                    b.HasOne("OfficeBoy.Models.Employee", "Emp")
                        .WithMany("OfficeBoyShifts")
                        .HasForeignKey("EmpId")
                        .IsRequired()
                        .HasConstraintName("FK_OfficeBoyShifts_Employees");

                    b.Navigation("Emp");
                });

            modelBuilder.Entity("OfficeBoy.Models.OfficeLocation", b =>
                {
                    b.HasOne("OfficeBoy.Models.Department", "Dept")
                        .WithMany("OfficeLocations")
                        .HasForeignKey("DeptId")
                        .IsRequired()
                        .HasConstraintName("FK_OfficeLocations_Departments");

                    b.Navigation("Dept");
                });

            modelBuilder.Entity("OfficeBoy.Models.Order", b =>
                {
                    b.HasOne("OfficeBoy.Models.Drink", "Drink")
                        .WithMany("Orders")
                        .HasForeignKey("DrinkId")
                        .IsRequired()
                        .HasConstraintName("FK_Orderes_Drinks");

                    b.HasOne("OfficeBoy.Models.Employee", "Emp")
                        .WithMany("Orders")
                        .HasForeignKey("EmpId")
                        .IsRequired()
                        .HasConstraintName("FK_Orderes_Employees");

                    b.HasOne("OfficeBoy.Models.OfficeLocation", "OfficeLocation")
                        .WithMany("Orders")
                        .HasForeignKey("OfficeLocationId")
                        .IsRequired()
                        .HasConstraintName("FK_Orderes_OfficeLocations");

                    b.Navigation("Drink");

                    b.Navigation("Emp");

                    b.Navigation("OfficeLocation");
                });

            modelBuilder.Entity("OfficeBoy.Models.Payment", b =>
                {
                    b.HasOne("OfficeBoy.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Payments_Orders");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OfficeBoy.Models.Department", b =>
                {
                    b.Navigation("OfficeLocations");
                });

            modelBuilder.Entity("OfficeBoy.Models.Drink", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OfficeBoy.Models.Employee", b =>
                {
                    b.Navigation("OfficeBoyShifts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OfficeBoy.Models.OfficeLocation", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OfficeBoy.Models.Order", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
